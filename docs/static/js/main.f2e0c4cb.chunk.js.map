{"version":3,"sources":["reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","actions/index.js","pages/Login.js","components/header.js","components/form.js","components/footer.js","components/tableelement.js","pages/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","email","password","name","user","state","action","type","payload","isFetching","currencies","expenses","wallet","filter","expense","id","rootReducer","combineReducers","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","addExpense","emailState","senha","nome","error","buttonDisabled","Login","onChange","bind","e","this","target","value","setState","emailValidation","passwordValidation","history","props","loginInfo","dispatchLogin","push","test","length","className","src","alt","data-testid","onClick","onSubmit","disabled","React","Component","connect","dispatch","actions","Header","convertValue","currency","valueExchange","exchangeRates","ask","Number","expenseTotal","reduce","acc","toFixed","method","tag","description","Form","dispatchCurrencies","dispatchExpense","htmlFor","map","cur","key","a","fetch","response","json","rawCur","filterCur","Object","keys","expenseLength","myExpense","Footer","role","aria-label","TableElement","findExchange","findCurrencyName","deleteExpense","Wallet","index","App","exact","path","component","Carteira","Boolean","window","location","hostname","match","ReactDOM","render","basename","Store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f2e0c4cb.chunk.js","sourcesContent":["// Esse reducer será responsável por tratar as informações da pessoa usuária\nconst INITIAL_STATE = {\n  email: '',\n  password: '',\n  name: '',\n};\n\nfunction user(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case 'LOGIN_USER':\n    return {\n      ...state,\n      email: action.payload.email,\n      password: action.payload.password,\n      name: action.payload.name,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default user;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nconst INITIAL_STATE = {\n  isFetching: true,\n  currencies: [],\n  expenses: [],\n};\n\nfunction wallet(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case 'REQUEST_CURRENCIES':\n    return { ...state, isFetching: true };\n  case 'GET_CURRENCIES':\n    return { ...state, isFetching: false, currencies: action.payload };\n  case 'ADD_EXPENSE':\n    return { ...state, expenses: [...state.expenses, action.payload] };\n  case 'DELETE_EXPENSE':\n    return {\n      ...state,\n      expenses: state.expenses.filter((expense) => expense.id !== action.payload),\n    };\n  default:\n    return state;\n  }\n}\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","// Coloque aqui suas actions\nexport const loginUser = (loginInfo) => ({\n  type: 'LOGIN_USER',\n  payload: {\n    email: loginInfo.email,\n    password: loginInfo.senha,\n    name: loginInfo.nome,\n  },\n});\n\nexport const requestCurrencies = () => ({\n  type: 'REQUEST_CURRENCIES',\n});\n\nexport const getCurrencies = (currencies) => ({\n  type: 'GET_CURRENCIES',\n  payload: currencies,\n});\n\nexport const fetchCurrencies = () => async (dispatch) => {\n  dispatch(requestCurrencies());\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const rawCur = await response.json();\n  const filterCur = Object.keys(rawCur).filter((key) => key !== 'USDT');\n  dispatch(getCurrencies(filterCur));\n};\n\nexport const addExpense = (expense) => ({\n  type: 'ADD_EXPENSE',\n  payload: expense,\n});\n\nexport const sendExpense = (expense, wallet) => async (dispatch) => {\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const rawCur = await response.json();\n\n  const expenseLength = wallet.expenses.length;\n  const myExpense = { id: expenseLength, ...expense, exchangeRates: rawCur };\n\n  dispatch(addExpense(myExpense));\n};\n\nexport const deleteExpense = (expense) => ({\n  type: 'DELETE_EXPENSE',\n  payload: expense.id,\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './Login.css';\nimport '../index.css';\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport * as actions from '../actions';\n\nconst emailState = {\n  email: '',\n  senha: '',\n  nome: '',\n  error: {\n    email: '',\n    password: '',\n  },\n  buttonDisabled: true,\n};\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = emailState;\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(e) {\n    const { buttonDisabled } = this.state;\n    const { id, value } = e.target;\n    this.setState({\n      [id]: value,\n    });\n\n    this.setState({ buttonDisabled: true }, () => {\n      if (this.emailValidation() && this.passwordValidation()) {\n        this.setState({\n          buttonDisabled: false,\n        });\n      }\n    });\n\n    if (!buttonDisabled) {\n      this.setState({\n        error: { email: '', password: '' },\n      });\n    }\n  }\n\n  onSubmit() {\n    const { email, senha, nome } = this.state;\n    const { history } = this.props;\n    const loginInfo = { email, senha, nome };\n\n    const { dispatchLogin } = this.props;\n\n    if (this.emailValidation() && this.passwordValidation()) {\n      dispatchLogin(loginInfo);\n      history.push('/carteira');\n    }\n  }\n\n  emailValidation() {\n    const { email, error } = this.state;\n    const regex = /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/g;\n    if (!email || regex.test(email) === false) {\n      return false;\n    }\n\n    this.setState({\n      error: { ...error, email: '' },\n    });\n    return true;\n  }\n\n  passwordValidation() {\n    const { senha, error } = this.state;\n    const passMinLength = 6;\n    if (!senha || senha.length < passMinLength) {\n      this.setState({\n        error: { ...error, password: 'Senha inválida' },\n      });\n      return false;\n    }\n\n    this.setState({\n      error: { ...error, password: '' },\n    });\n    return true;\n  }\n\n  render() {\n    const { email, senha, nome, error, buttonDisabled } = this.state;\n\n    return (\n      <div className=\"form form-group\">\n        <img src=\"./trybewallet.png\" alt=\"trybewallet\" className=\"logo\" />\n        <h4>Bem vindo a TrybeWallet.</h4>\n        <h6>Feito por João Pster.</h6>\n        <div className=\"form-group mb-3\">\n          <div className=\"inputForm\">\n            <strong>Nome</strong>\n            <input\n              id=\"nome\"\n              type=\"text\"\n              name=\"nome\"\n              value={ nome }\n              onChange={ this.onChange }\n              className=\"form-control\"\n            />\n          </div>\n\n          <div className=\"inputForm\">\n            <strong>Email</strong>\n            <input\n              data-testid=\"email-input\"\n              id=\"email\"\n              type=\"email\"\n              name=\"email\"\n              value={ email }\n              onChange={ this.onChange }\n              className=\"form-control\"\n            />\n            <span className=\"text-danger\">{error.email}</span>\n          </div>\n\n          <div className=\"inputForm\">\n            <strong>Senha</strong>\n            <input\n              data-testid=\"password-input\"\n              id=\"senha\"\n              type=\"password\"\n              name=\"senha\"\n              value={ senha }\n              onChange={ this.onChange }\n              className=\"form-control\"\n            />\n            <span className=\"text-danger\">{error.password}</span>\n          </div>\n        </div>\n        <div className=\"d-grid\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-dark\"\n            onClick={ () => this.onSubmit() }\n            disabled={ buttonDisabled }\n          >\n            Entrar\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchLogin: (loginInfo) => dispatch(actions.loginUser(loginInfo)),\n});\n\nLogin.propTypes = {\n  dispatchLogin: PropTypes.func,\n}.isRequired;\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './header.css';\nimport '../index.css';\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nclass Header extends React.Component {\n  // convertValue veio do repositório de Willian Bomfim (https://github.com/tryber/sd-020-b-project-trybewallet/pull/124/files)\n  convertValue = (expense) => {\n    const { value, currency, exchangeRates } = expense;\n    const valueExchange = exchangeRates[currency].ask;\n    return Number(value * valueExchange);\n  }\n\n  expenseTotal = () => {\n    const { wallet: { expenses } } = this.props;\n    const total = expenses.reduce((acc, expense) => acc + this.convertValue(expense), 0);\n    return total.toFixed(2);\n  };\n\n  render() {\n    const { user } = this.props;\n\n    return (\n      <header>\n        <h1>Carteira</h1>\n        <div className=\"container-direita\">\n          <div className=\"usuario\">\n            <p data-testid=\"email-field\">{user.email}</p>\n            <p data-testid=\"name-field\">{user.name}</p>\n          </div>\n          <div className=\"despesas\">\n            <span>Despesa Total: R$</span>\n            <span\n              data-testid=\"total-field\"\n            >\n              {`${this.expenseTotal()}`}\n            </span>\n            <span data-testid=\"header-currency-field\">BRL</span>\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.user,\n  wallet: state.wallet,\n});\n\nHeader.propTypes = {\n  user: PropTypes.shape({ email: PropTypes.string, name: PropTypes.string }),\n  wallet: PropTypes.shape({ despesa: PropTypes.number }),\n}.isRequired;\n\nexport default connect(mapStateToProps, null)(Header);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as actions from '../actions';\nimport '../index.css';\nimport './form.css';\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nconst INITIAL_STATE = {\n  value: 0,\n  currency: 'USD',\n  method: 'Dinheiro',\n  tag: 'Alimentação',\n  description: '',\n};\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = INITIAL_STATE;\n\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const { dispatchCurrencies } = this.props;\n    dispatchCurrencies();\n  }\n\n  onChange(e) {\n    const { id, value } = e.target;\n    this.setState({\n      [id]: value,\n    });\n  }\n\n  onSubmit() {\n    const { dispatchExpense, wallet } = this.props;\n    const { value, currency, method, tag, description } = this.state;\n    dispatchExpense({ value, currency, method, tag, description }, wallet);\n    this.setState(INITIAL_STATE);\n  }\n\n  render() {\n    const { wallet } = this.props;\n    const { currencies } = wallet;\n    const { value, currency, method, tag, description } = this.state;\n\n    return (\n      <div className=\"form-add form-group\">\n        <label htmlFor=\"value\">\n          Valor\n          <input\n            className=\"form-control\"\n            data-testid=\"value-input\"\n            type=\"number\"\n            id=\"value\"\n            value={ value }\n            onChange={ this.onChange }\n          />\n        </label>\n        <label htmlFor=\"currency\">\n          moeda\n          <select\n            className=\"form-control\"\n            id=\"currency\"\n            name=\"currency\"\n            value={ currency }\n            onChange={ this.onChange }\n          >\n            {currencies.map((cur) => (\n              <option key={ cur } value={ cur }>{cur}</option>\n            ))}\n          </select>\n        </label>\n        <label htmlFor=\"method\">\n          Metodo\n          <select\n            className=\"form-control\"\n            data-testid=\"method-input\"\n            id=\"method\"\n            name=\"method\"\n            value={ method }\n            onChange={ this.onChange }\n          >\n            <option value=\"Dinheiro\">Dinheiro</option>\n            <option value=\"Cartão de crédito\">Cartão de crédito</option>\n            <option value=\"Cartão de débito\">Cartão de débito</option>\n          </select>\n        </label>\n        <label htmlFor=\"tag\">\n          Categoria\n          <select\n            className=\"form-control\"\n            data-testid=\"tag-input\"\n            id=\"tag\"\n            name=\"tag\"\n            value={ tag }\n            onChange={ this.onChange }\n          >\n            <option value=\"Alimentação\">Alimentação</option>\n            <option value=\"Lazer\">Lazer</option>\n            <option value=\"Trabalho\">Trabalho</option>\n            <option value=\"Transporte\">Transporte</option>\n            <option value=\"Saúde\">Saúde</option>\n          </select>\n        </label>\n        <label htmlFor=\"description\">\n          Descrição\n          <input\n            className=\"form-control\"\n            data-testid=\"description-input\"\n            type=\"text\"\n            id=\"description\"\n            value={ description }\n            onChange={ this.onChange }\n          />\n        </label>\n        <button\n          className=\"btn btn-primary\"\n          type=\"button\"\n          onClick={ this.onSubmit }\n        >\n          Adicionar Despesa\n        </button>\n      </div>\n    );\n  }\n}\n\nForm.propTypes = {\n  dispatchCurrencies: PropTypes.func.isRequired,\n  wallet: PropTypes.shape({ currencies: PropTypes.arrayOf(PropTypes.string) }).isRequired,\n  dispatchExpense: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.user,\n  wallet: state.wallet,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchCurrencies: () => dispatch(actions.fetchCurrencies()),\n  dispatchExpense: (expense, wallet) => (dispatch(actions.sendExpense(expense, wallet))),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React from 'react';\nimport '../index.css';\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './footer.css';\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <footer>\n        <p>\n          Feito com\n          {' '}\n          <span role=\"img\" aria-label=\"Heart\">❤️</span>\n          {' '}\n          por João Pster.\n        </p>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass TableElement extends React.Component {\n  // convertValue veio do repositório de Willian Bomfim (https://github.com/tryber/sd-020-b-project-trybewallet/pull/124/files)\n  convertValue = (expense) => {\n    const { value, currency, exchangeRates } = expense;\n    const valueExchange = exchangeRates[currency].ask;\n    return Number(value * valueExchange).toFixed(2);\n  }\n\n  findExchange = (expense) => {\n    const { currency, exchangeRates } = expense;\n    return Number(exchangeRates[currency].ask).toFixed(2);\n  }\n\n  findCurrencyName = (expense) => {\n    const { currency, exchangeRates } = expense;\n    return exchangeRates[currency].name;\n  }\n\n  render() {\n    const { expense, deleteExpense } = this.props;\n    const {\n      description,\n      tag,\n      method,\n      value,\n    } = expense;\n\n    return (\n      <tr className=\"\">\n        <td>{description}</td>\n        <td>{tag}</td>\n        <td>{method}</td>\n        <td>{Number(value).toFixed(2)}</td>\n        <td>{this.findCurrencyName(expense)}</td>\n        <td>{this.findExchange(expense)}</td>\n        <td>{this.convertValue(expense)}</td>\n        <td>Real</td>\n        <td>\n          <button\n            className=\"btn btn-danger\"\n            data-testid=\"delete-btn\"\n            type=\"button\"\n            onClick={ () => deleteExpense(expense) }\n          >\n            Deletar\n          </button>\n        </td>\n      </tr>\n    );\n  }\n}\n\nTableElement.propTypes = {\n  expense: PropTypes.shape({\n    description: PropTypes.string,\n    tag: PropTypes.string,\n    method: PropTypes.string,\n    value: PropTypes.number,\n    currency: PropTypes.string,\n    exchange: PropTypes.number,\n    exchangeCurrency: PropTypes.string,\n  }),\n}.isRequired;\n\nexport default connect(null, null)(TableElement);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/header';\nimport Form from '../components/form';\nimport Footer from '../components/footer';\nimport TableElement from '../components/tableelement';\nimport '../index.css';\nimport './Wallet.css';\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport * as actions from '../actions';\n\nclass Wallet extends React.Component {\n  deleteExpense = (expense) => {\n    const { deleteExpense } = this.props;\n    deleteExpense(expense);\n  }\n\n  render() {\n    const { expenses } = this.props;\n\n    return (\n      <>\n        <Header />\n        <Form />\n        <table className=\"table table-hover\">\n          <thead className=\"\">\n            <tr>\n              <th>Descrição</th>\n              <th>Tag</th>\n              <th>Método de pagamento</th>\n              <th>Valor</th>\n              <th>Moeda</th>\n              <th>Câmbio utilizado</th>\n              <th>Valor convertido</th>\n              <th>Moeda de conversão</th>\n              <th>Editar/Excluir</th>\n            </tr>\n          </thead>\n          <tbody>\n            {expenses.map((expense, index) => (<TableElement\n              key={ index }\n              expense={ expense }\n              deleteExpense={ this.deleteExpense }\n            />))}\n          </tbody>\n        </table>\n        <Footer />\n      </>\n    );\n  }\n}\n\nWallet.propTypes = {\n  user: PropTypes.shape({ name: PropTypes.string }).isRequired,\n  wallet: PropTypes.shape({\n    expenses: PropTypes.arrayOf(PropTypes.shape({ description: PropTypes.string })),\n  }).isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.shape({\n    description: PropTypes.string,\n  })).isRequired,\n  deleteExpense: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.user,\n  wallet: state.wallet,\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteExpense: (expense) => dispatch(actions.deleteExpense(expense)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Carteira from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/carteira\" component={ Carteira } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport Store from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <HashRouter basename=\"/\">\n      <Provider store={ Store }>\n        <App />\n      </Provider>\n    </HashRouter>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}